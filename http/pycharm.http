# PyCharm HTTP Client requests
# 使用方法：选择环境 dev（http-client.env.json），按段发送。
# 认证：所有需要鉴权的接口在请求头加 Token: {{token}} （或 Authorization: Bearer {{token}}）
# 验证码：本地调试在控制台日志打印 [DEBUG VCODE]

########## 用户 / 验证码 & 账号 ##########

### User - Send Code (register)
POST {{base_url}}/user/send_code/
Content-Type: application/json

{
  "phone": "13800000000",
  "scene": "register"
}

### User - Send Code (reset password)
POST {{base_url}}/user/send_code/
Content-Type: application/json

{
  "phone": "13800000000",
  "scene": "reset"
}

### User - Send Code (throttle expect 4501)
POST {{base_url}}/user/send_code/
Content-Type: application/json

{
  "phone": "13800000000",
  "scene": "register"
}

### User - Register (需要先手动从控制台获取正确验证码填入 code)
POST {{base_url}}/user/register/
Content-Type: application/json

{
  "phone": "13800000000",
  "password": "Abc123",
  "code": "123456",
  "username": "tom",
  "avatar_url": "user_avatar_images/01.png"
}

### User - Register (验证码错误示例，期望 4502)
POST {{base_url}}/user/register/
Content-Type: application/json

{
  "phone": "13800000000",
  "password": "Abc123",
  "code": "000000"
}

### User - Login (sets global token)
POST {{base_url}}/user/login/
Content-Type: application/json

{
  "phone": "13800000000",
  "password": "Abc123"
}

> {%
  const body = JSON.parse(response.body || '{}');
  const token = body?.data?.token || body?.token;
  if (token) { client.global.set("token", token); }
%}

### User - Login (fail wrong password)
POST {{base_url}}/user/login/
Content-Type: application/json

{
  "phone": "13800000000",
  "password": "WRONG_PASS"
}

### User - Reset Password (先获取验证码 scene=reset)
POST {{base_url}}/user/reset_password/
Content-Type: application/json

{
  "phone": "13800000000",
  "code": "123456",
  "new_password": "NewAbc123"
}

### User - Logout
POST {{base_url}}/user/logout/
Token: {{token}}

### User - Me (by phone)
GET {{base_url}}/user/me/?phone=13800000000
Token: {{token}}

### User - Me (missing param error)
GET {{base_url}}/user/me/
Token: {{token}}

### User - Update
PUT {{base_url}}/user/update/
Content-Type: application/json
Token: {{token}}

{
  "id": 9,
  "username": "tom_new",
  "avatar_url": "user_avatar_images/02.png"
}

### User - Delete (soft)
DELETE {{base_url}}/user/delete/?id=9
Token: {{token}}

########## 地址管理 ##########

### Address - Create
POST {{base_url}}/user/address/
Content-Type: application/json
Token: {{token}}

{
  "user": 9,
  "recipient_name": "张三",
  "recipient_phone": "13800000000",
  "province": "上海",
  "city": "上海",
  "district": "徐汇区",
  "detail_address": "漕溪北路YYY号",
  "postal_code": "200000",
  "is_default": false
}

### Address - Detail
GET {{base_url}}/user/address/1/
Token: {{token}}

### Address - Update
PUT {{base_url}}/user/address/1/
Content-Type: application/json
Token: {{token}}

{
  "recipient_phone": "13800000001",
  "is_default": true
}

### Address - Delete
DELETE {{base_url}}/user/address/1/
Token: {{token}}

### Address - List (by user)
GET {{base_url}}/user/address/list/?user=9
Token: {{token}}

########## 商品分类 & 标签 ##########

### Product - Main menu
GET {{base_url}}/product/main_menu/

### Product - Sub menu
GET {{base_url}}/product/sub_menu/?main_menu_id=1

### Product - Sub sub menu
GET {{base_url}}/product/sub_sub_menu/?sub_menu_id=2

### Product - Tag products
GET {{base_url}}/product/tag/2/1/

### Product - Query detail
GET {{base_url}}/product/query/1001/

### Product - Query detail (invalid id error)
GET {{base_url}}/product/query/abc/

########## 商品搜索（sort: 0默认 1价升 2价降 3评升 4评降） ##########

### Product - Search (default sort 0)
GET {{base_url}}/product/search/?q=蓝&page=1&page_size=10&sort=0

### Product - Search (price asc 1)
GET {{base_url}}/product/search/?q=蓝&page=1&sort=1

### Product - Search (price desc 2)
GET {{base_url}}/product/search/?q=蓝&page=1&sort=2

### Product - Search (review count asc 3)
GET {{base_url}}/product/search/?q=蓝&page=1&sort=3

### Product - Search (review count desc 4)
GET {{base_url}}/product/search/?q=0375&page=1&sort=4

### Product - Search (missing q error)
GET {{base_url}}/product/search/?page=1

########## 购物车（新版 Token 驱动） ##########

### Shopping Cart - List (含 summary)
GET {{base_url}}/shopping_cart/
Token: {{token}}

### Shopping Cart - Add (mode=add 默认)
POST {{base_url}}/shopping_cart/
Content-Type: application/json
Token: {{token}}

{
  "product_id": 1001,
  "quantity": 1
}

### Shopping Cart - Set quantity (mode=set)
POST {{base_url}}/shopping_cart/
Content-Type: application/json
Token: {{token}}

{
  "product_id": 1001,
  "quantity": 5,
  "mode": "set"
}

### Shopping Cart - Invalid quantity (expect 3400)
POST {{base_url}}/shopping_cart/
Content-Type: application/json
Token: {{token}}

{
  "product_id": 1001,
  "quantity": -5
}

### Shopping Cart - Update item quantity (PATCH)
PATCH {{base_url}}/shopping_cart/item/12/
Content-Type: application/json
Token: {{token}}

{
  "quantity": 3
}

### Shopping Cart - Update item selected (PATCH)
PATCH {{base_url}}/shopping_cart/item/12/
Content-Type: application/json
Token: {{token}}

{
  "selected": false
}

### Shopping Cart - Delete item
DELETE {{base_url}}/shopping_cart/item/12/
Token: {{token}}

### Shopping Cart - Select all
POST {{base_url}}/shopping_cart/select_all
Content-Type: application/json
Token: {{token}}

{
  "selected": true
}

### Shopping Cart - Unselect all
POST {{base_url}}/shopping_cart/select_all
Content-Type: application/json
Token: {{token}}

{
  "selected": false
}

### Shopping Cart - Clear selected items
POST {{base_url}}/shopping_cart/clear
Content-Type: application/json
Token: {{token}}

{
  "only_selected": true
}

### Shopping Cart - Clear all
POST {{base_url}}/shopping_cart/clear
Content-Type: application/json
Token: {{token}}

{}

########## 订单 ##########

### Order - Create from cart
POST {{base_url}}/order/create/
Content-Type: application/json
Token: {{token}}

{
  "recipient": {
    "name": "张三",
    "phone": "13800000000",
    "address": "上海市徐汇区漕溪北路XXX号"
  },
  "remark": "请尽快发货"
}

### Order - Direct buy
POST {{base_url}}/order/direct/
Content-Type: application/json
Token: {{token}}

{
  "product_id": 1001,
  "quantity": 1,
  "recipient": {
    "name": "张三",
    "phone": "13800000000",
    "address": "上海市徐汇区漕溪北路XXX号"
  },
  "remark": "礼品包装"
}

########## 评论（返回含用户信息与头像URL） ##########

### Review - List
GET {{base_url}}/review/?page=1&page_size=10

### Review - Create
POST {{base_url}}/review/
Content-Type: application/json
Token: {{token}}

{
  "order_item": 1,
  "content": "很好",
  "rating": 5,
  "images": ["static/review_images/01.png"]
}

### Review - Retrieve
GET {{base_url}}/review/123/

### Review - Update (partial)
PATCH {{base_url}}/review/123/
Content-Type: application/json
Token: {{token}}

{
  "content": "更新后的评价",
  "rating": 4,
  "images": ["static/review_images/01.png", "/static/product_images/blue.png"]
}

### Review - Update (full PUT)
PUT {{base_url}}/review/123/
Content-Type: application/json
Token: {{token}}

{
  "order_item": 1,
  "content": "完整替换评价",
  "rating": 5,
  "images": ["static/review_images/01.png"]
}

### Review - Delete (soft)
DELETE {{base_url}}/review/123/
Token: {{token}}

### Review - Query by user
GET {{base_url}}/review/user/9/?page=1&page_size=10

### Review - Query by product
GET {{base_url}}/review/product/3/?page=1&page_size=10

### Review - Query by store
GET {{base_url}}/review/store/5/?page=1&page_size=10

########## OpenAPI 文档 ##########

### OpenAPI - Schema (JSON)
GET {{base_url}}/api/schema/

### OpenAPI - Swagger UI (HTML)
GET {{base_url}}/api/docs/

### OpenAPI - Redoc (HTML)
GET {{base_url}}/api/redoc/
